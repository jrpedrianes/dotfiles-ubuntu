#!/bin/bash

# {{ template "scripts-library" }}

function strict_mode {
    set -T # inherit DEBUG and RETURN trap for functions
    set -C # prevent file overwrite by > &> <>
    set -E # inherit -e
    set -e # exit immediately on errors
    set -u # exit on not assigned variables
    set -o pipefail # exit on pipe failure
}

function read_data {
  local op_item
  local gpg_key
  local cache_file

  strict_mode

  op_item=$1
  gpg_key=$2
  cache_file=$(echo "${op_item}" | sed -e 's/[^A-Za-z0-9._-]/_/g')
  cache_file="${HOME}/.kube/${cache_file}.asc"

  if [[ ! -f "${cache_file}" ]]; then
    op read "${op_item}" | \
      base64 -d | \
      gpg --encrypt --sign --armor --recipient "${gpg_key}" > "${cache_file}"
  fi

  gpg --decrypt "${cache_file}" 2>/dev/null

}

strict_mode

op_item_client_certificate_data=$1
op_item_client_key_data=$2
gpg_receiver_key=$3

if [[ "${op_item_client_certificate_data}" = "" ]]; then
  log_error "Incorrect invocation"
  log_error "Usage:"
  log_error "  $> kubectl-1password-credential <1Password certificate> <1Password key> <gpg key>"
  exit 1
fi

client_certificate_data=""
client_key_data=""

client_certificate_data=$(read_data "${op_item_client_certificate_data}" "${gpg_receiver_key}")
client_key_data=$(read_data "${op_item_client_key_data}" "${gpg_receiver_key}")

json=$(
cat <<EOF
{
  "apiVersion": "client.authentication.k8s.io/v1",
  "kind": "ExecCredential",
  "status": {
    "clientCertificateData": \$client_certificate_data,
    "clientKeyData": \$client_key_data
  }
}
EOF
)

jq -n \
  --arg client_certificate_data "$client_certificate_data" \
  --arg client_key_data "$client_key_data" \
  "$json"
